{
    "define": {
        "prefix": "define",
        "body": "define(`${1:macroName}', `${0:[expansion]}')",
        "description": "Defines name to expand to expansion. If expansion is not given, it is taken to be empty.The expansion of define is void. The macro define is recognized only with parameters."
    },
    "undefine": {
        "prefix": "undefine",
        "body": "undefine(`${1:macroName}', ${0:...})",
        "description": "For each argument, remove the macro name. The macro names must necessarily be quoted, since they will be expanded otherwise."
    },
    "defn": {
        "prefix": "defn",
        "body": "defn(`${1:macroName}', ${0:...})",
        "description": "Expands to the quoted definition of each name. If an argument is not a defined macro, the expansion for that argument is empty."
    },
    "pushdef": {
        "prefix": "pushdef",
        "body": "pushdef(`${1:macroName}', `${0:[expansion]}')",
        "description": "These macros work in a stack-like fashion. A macro is temporarily redefined with pushdef, which replaces an existing definition of name, while saving the previous definition, before the new one is installed. If there is no previous definition, pushdef behaves exactly like define."
    },
    "popdef": {
        "prefix": "popdef",
        "body": "popdef(`${1:macroName}', ${0:...})",
        "description": "These macros work in a stack-like fashion. A macro is temporarily redefined with pushdef, which replaces an existing definition of name, while saving the previous definition, before the new one is installed. If there is no previous definition, pushdef behaves exactly like define."
    },
    "indir": {
        "prefix": "indir",
        "body": "indir(`${1:macroName}', ${0:args...})",
        "description": "Results in a call to the macro name, which is passed the rest of the arguments args. If name is not defined, an error message is printed, and the expansion is void."
    },
    "builtin": {
        "prefix": "builtin",
        "body": "builtin(`${1:macroName}', ${0:args...})",
        "description": "Results in a call to the builtin name, which is passed the rest of the arguments args. If name does not name a builtin, an error message is printed, and the expansion is void."
    },
    "ifdef": {
        "prefix": "ifdef",
        "body": "ifdef(`${1:macroName}', ${2:expansion1}, ${3:[expansion2]})",
        "description": "If name is defined as a macro, ifdef expands to string-1, otherwise to string-2. If string-2 is omitted, it is taken to be the empty string (according to the normal rules)."
    },
    "comment": {
        "prefix": "ifelse",
        "body": "ifelse(`${1:comment}')"
    },
    "ifelse": {
        "prefix": "ifelse",
        "body": "ifelse(${1:string-1}, ${2:string-2}, ${3:equal}, ${4:[not-equal]})"
    },
    "switch case": {
        "prefix": "ifelse",
        "body": "ifelse(${1:${2:string-1}, ${3:string-2}, ${4:equal-1}}, ${5:${6:string-3}, ${7:string-4}, ${8:equal-2}}, ${9:…}, ${10:[not-equal]})",
        "description": "Used with only one argument, the ifelse simply discards it and produces no output.If called with three or four arguments, ifelse expands into equal, if string-1 and string-2 are equal (character for character), otherwise it expands to not-equal. A final fifth argument is ignored, after triggering a warning.If called with six or more arguments, and string-1 and string-2 are equal, ifelse expands into equal-1, otherwise the first three arguments are discarded and the processing starts again."
    },
    "shift": {
        "prefix": "shift",
        "body": "shift(`${1:arg1}', ${0:...})",
        "description": "Takes any number of arguments, and expands to all its arguments except arg1, separated by commas, with each argument quoted."
    },
    "dumpdef": {
        "prefix": "dumpdef",
        "body": "dumpdef(`${1:macroName}', ${0:...})",
        "description": "Accepts any number of arguments. If called without any arguments, it displays the definitions of all known names, otherwise it displays the definitions of the names given."
    },
    "trace": {
        "prefix": "trace",
        "body": "${1|traceon,traceoff|}(`${2:macroName}', ${0:...})",
        "description": "When called without any arguments, traceon and traceoff will turn tracing on and off, respectively, for all currently defined macros.When called with arguments, only the macros listed in names are affected, whether or not they are currently defined.The expansion of traceon and traceoff is void."
    },
    "debugmode": {
        "prefix": "debugmode",
        "body": "debugmode(`${1|-,+|}${2|a,c,e,f,i,l,p,q,t,x,V|}')",
        "description": "Equivalent to m4 command line option --debug"
    },
    "debugfile": {
        "prefix": "debugfile",
        "body": "debugfile(`${0:[file]}')",
        "description": "Sends all further debug and trace output to file, opened in append mode. If file is the empty string, debug and trace output are discarded. If debugfile is called without any arguments, debug and trace output are sent to standard error. This does not affect warnings, error messages, or errprint output, which are always sent to standard error. If file cannot be opened, the current debug file is unchanged, and an error is issued."
    },
    "dnl": {
        "prefix": "dnl",
        "body": "dnl",
        "description": "All characters, up to and including the next newline, are discarded without performing any macro expansion. A warning is issued if the end of the file is encountered without a newline."
    },
    "changequote": {
        "prefix": "changequote",
        "body": "changequote(`${1:[start=``']}',`${2:[end=``']}')",
        "description": "All characters, up to and including the next newline, are discarded without performing any macro expansion. A warning is issued if the end of the file is encountered without a newline."
    },
    "changecom": {
        "prefix": "changecom",
        "body": "changecom(`${1:[start=`#']}',`${2:[end=`NL']}')",
        "description": "This sets start as the new begin-comment delimiter and end as the new end-comment delimiter. If both arguments are missing, or start is void, then comments are disabled. Otherwise, if end is missing or void, the default end-comment delimiter of newline is used. The comment delimiters can be of any length."
    },
    "changeword": {
        "prefix": "changeword",
        "body": "changeword(`${1:regex}')",
        "description": "Changes the regular expression for recognizing macro names to be regex. If regex is empty, use `[_a-zA-Z][_a-zA-Z0-9]*'. regex must obey the constraint that every prefix of the desired final pattern is also accepted by the regular expression. If regex contains grouping parentheses, the macro invoked is the portion that matched the first group, rather than the entire matching string."
    },
    "m4wrap": {
        "prefix": "m4wrap",
        "body": "m4wrap(`${1:string}', ${0:...})",
        "description": "Stores string in a safe place, to be reread when end of input is reached. As a GNU extension, additional arguments are concatenated with a space to the string."
    },
    "include": {
        "prefix": [
            "include",
            "sinclude"
        ],
        "body": "${1|include,sinclude|}(`${0:[file]}')",
        "description": "Both macros cause the file named file to be read by m4. When the end of the file is reached, input is resumed from the previous input file.The expansion of include and sinclude is therefore the contents of file.If file does not exist, is a directory, or cannot otherwise be read, the expansion is void, and include will fail with an error while sinclude is silent. The empty string counts as a file that does not exist."
    },
    "divert": {
        "prefix": "divert",
        "body": "divert(`${1:[number=`0']}')",
        "description": "The current diversion is changed to number. If number is left out or empty, it is assumed to be zero. If number cannot be parsed, the diversion is unchanged."
    },
    "undivert": {
        "prefix": "undivert",
        "body": "undivert(`${1:diversions}', ${0:...})",
        "description": "Undiverts the numeric diversions given by the arguments, in the order given. If no arguments are supplied, all diversions are undiverted, in numerical order."
    },
    "divnum": {
        "prefix": "divnum",
        "body": "divnum",
        "description": "Expands to the number of the current diversion."
    },
    "len": {
        "prefix": "len",
        "body": "len(`${1:string}')",
        "description": "Expands to the length of string, as a decimal number."
    },
    "index": {
        "prefix": "index",
        "body": "index(`${1:string}', `${2:substring}')",
        "description": "Expands to the index of the first occurrence of substring in string. The first character in string has index 0. If substring does not occur in string, index expands to ‘-1’."
    },
    "regexp": {
        "prefix": "regexp",
        "body": "regexp(`${1:string}', `${2:regexp}', `${3:[replacement]}')",
        "description": "If replacement is omitted, regexp expands to the index of the first match of regexp in string. If regexp does not match anywhere in string, it expands to -1.If replacement is supplied, and there was a match, regexp changes the expansion to this argument, with ‘\\n’ substituted by the text matched by the nth parenthesized sub-expression of regexp, up to nine sub-expressions. The escape ‘\\&’ is replaced by the text of the entire regular expression matched. For all other characters, ‘\\’ treats the next character literally. A warning is issued if there were fewer sub-expressions than the ‘\\n’ requested, or if there is a trailing ‘\\’. If there was no match, regexp expands to the empty string."
    },
    "substr": {
        "prefix": "substr",
        "body": "substr(`${1:string}', `${2:from}', `${3:[length]}')",
        "description": "Expands to the substring of string, which starts at index from, and extends for length characters, or to the end of string, if length is omitted. The starting index of a string is always 0. The expansion is empty if there is an error parsing from or length, if from is beyond the end of string, or if length is negative."
    },
    "translit": {
        "prefix": "translit",
        "body": "translit(`${1:string}', `${2:chars}', `${3:[replacement]}')",
        "description": "Expands to string, with each character that occurs in chars translated into the character from replacement with the same index.If replacement is shorter than chars, the excess characters of chars are deleted from the expansion; if chars is shorter, the excess characters in replacement are silently ignored. If replacement is omitted, all characters in string that are present in chars are deleted from the expansion. If a character appears more than once in chars, only the first instance is used in making the translation. Only a single translation pass is made, even if characters in replacement also appear in chars."
    },
    "patsubst": {
        "prefix": "patsubst",
        "body": "patsubst(`${1:string}', `${2:regexp}', `${3:[replacement]}')",
        "description": "Searches string for matches of regexp, and substitutes replacement for each match. The syntax for regular expressions is the same as in GNU Emacs (see Regexp).The parts of string that are not covered by any match of regexp are copied to the expansion. Whenever a match is found, the search proceeds from the end of the match, so a character from string will never be substituted twice. If regexp matches a string of zero length, the start position for the search is incremented, to avoid infinite loops.When a replacement is to be made, replacement is inserted into the expansion, with ‘\\n’ substituted by the text matched by the nth parenthesized sub-expression of patsubst, for up to nine sub-expressions. The escape ‘\\&’ is replaced by the text of the entire regular expression matched. For all other characters, ‘\\’ treats the next character literally. A warning is issued if there were fewer sub-expressions than the ‘\\n’ requested, or if there is a trailing ‘\\’.The replacement argument can be omitted, in which case the text matched by regexp is deleted."
    },
    "format": {
        "prefix": "format",
        "body": "format(`${1:format-string}', ${0:...})",
        "description": "Works much like the C function printf. The first argument format-string can contain ‘%’ specifications which are satisfied by additional arguments, and the expansion of format is the formatted string."
    },
    "Increment and decrement of integers": {
        "prefix": [
            "incr",
            "decr"
        ],
        "body": "${1|incr,decr|}(`${0:number}')",
        "description": "Expand to the numerical value of number, incremented or decremented, respectively, by one. Except for the empty string, the expansion is empty if number could not be parsed."
    },
    "Integer expressions are evaluated with eval": {
        "prefix": "eval",
        "body": "eval(`${1:expression}', `${2:[radix=`10']}', `${3:[width]}')",
        "description": "Expands to the value of expression. The expansion is empty if a problem is encountered while parsing the arguments. If specified, radix and width control the format of the output."
    },
    "Determining the platform": {
        "prefix": "__",
        "body": "${1|__gnu__,__os2__,os2,__unix__,unix,__windows__,windows|}",
        "description": "Sometimes it is desirable for an input file to know which platform m4 is running on. GNU m4 provides several macros that are predefined to expand to the empty string; checking for their existence will confirm platform details."
    },
    "Executing simple commands": {
        "prefix": "syscmd",
        "body": "syscmd(`${1:shell-command}')",
        "description": "Executes shell-command as a shell command."
    },
    "Reading the output of commands": {
        "prefix": "esyscmd",
        "body": "esyscmd(`${1:shell-command}')",
        "description": "Expands to the standard output of the shell command shell-command."
    },
    "Exit status": {
        "prefix": "sysval",
        "body": "sysval",
        "description": "Expands to the exit status of the last shell command run with syscmd or esyscmd. Expands to 0 if no command has been run yet."
    },
    "Making temporary files": {
        "prefix": [
            "mkstemp",
            "maketemp"
        ],
        "body": "${1|maketemp,mkstemp|}(`${2:template}')",
        "description": "Expands to the quoted name of a new, empty file, made from the string template, which should end with the string ‘XXXXXX’."
    },
    "You can print error messages using errprint": {
        "prefix": "errprint",
        "body": "errprint(`${1:message}', ${0:...})",
        "description": "Prints message and the rest of the arguments to standard error, separated by spaces."
    },
    "Printing current location": {
        "prefix": "__",
        "body": "${1|__file__,__line__,__program__|}",
        "description": "Expand to the quoted name of the current input file, the current input line number in that file, and the quoted name of the current invocation of m4."
    },
    "Exiting from m4": {
        "prefix": "m4exit",
        "body": "m4exit(`${1:[code=`0']}')",
        "description": "Causes m4 to exit, with exit status code. If code is left out, the exit status is zero. If code cannot be parsed, or is outside the range of 0 to 255, the exit status is one. No further input is read, and all wrapped and diverted text is discarded."
    }
}